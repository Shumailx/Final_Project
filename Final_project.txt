This project is based on online progress tracking app
Members of group:M.Shumail,Atta ur Rehman Hanzla
Roll no:32,18
1)User_authentication:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

class User {
private:
    string username;
    string password;

public:
    User(const string& username, const string& password) : username(username), password(password) {}

    const string& getUsername() const {
        return username;
    }

    const string& getPassword() const {
        return password;
    }
2)User_Profile:
class User {
private:
    string username;
    string password;

public:
    User(const string& username, const string& password) : username(username), password(password) {}

    const string& getUsername() const {
        return username;
    }

    const string& getPassword() const {
        return password;
    }
3)Goal_setting:
class GoalSetting {
private:
    struct Goal {
        string username;
        string goal;

        Goal(const string& u, const string& g) : username(u), goal(g) {}
    };

    vector<Goal> goals;

public:
    void setGoal(const string& username, const string& goal) {
        goals.push_back(Goal(username, goal));
        cout << "Goal set successfully for user " << username << ".\n";
    }

    void displayGoals(const string& username) {
        cout << "Goals for user " << username << ":\n";
        for (const auto& goal : goals) {
            if (goal.username == username) {
                cout << "- " << goal.goal << endl;
            }
        }
    }
4)Progress_Tracking:
class ProgressTracking {
private:
    struct Progress {
        string goal;
        int percentage;

        Progress(const string& g, int p) : goal(g), percentage(p) {}
    };

    vector<Progress> progress;

public:
    void trackProgress(const string& goal, int percentage) {
        progress.push_back(Progress(goal, percentage));
        cout << "Progress tracked for goal '" << goal << "': " << percentage << "% completed.\n";
    }

    void displayProgress(const string& goal) {
        cout << "Progress for goal '" << goal << "': ";
        for (const auto& p : progress) {
            if (p.goal == goal) {
                cout << p.percentage << "% completed\n";
                return;
            }
        }
        cout << "Not tracked yet\n";
    }
5)Task_management:
class TaskManagement {
private:
    struct Task {
        string goal;
        string name;
        bool completed;

        Task(const string& g, const string& n) : goal(g), name(n), completed(false) {}
    };

    vector<Task> tasks;

public:
    void addTask(const string& goal, const string& taskName) {
        tasks.push_back(Task(goal, taskName));
        cout << "Task '" << taskName << "' added to goal '" << goal << "'.\n";
    }

    void displayTasks(const string& goal) {
        cout << "Tasks for goal '" << goal << "':\n";
        for (const auto& task : tasks) {
            if (task.goal == goal) {
                cout << "- " << (task.completed ? "[X] " : "[ ] ") << task.name << endl;
            }
        }
    }

    void markTaskAsCompleted(const string& goal, const string& taskName) {
        for (auto& task : tasks) {
            if (task.goal == goal && task.name == taskName) {
                task.completed = true;
                cout << "Task '" << taskName << "' marked as completed for goal '" << goal << "'.\n";
                return;
            }
        }
        cout << "Task not found for goal '" << goal << "'.\n";
    }
6)Reminder_and_Notification:
class RemindersAndNotifications {
public:
    void sendReminder(const string& username, const string& message) {
        cout << "Reminder sent to user '" << username << "': " << message << endl;
    }
7)History:
class History {
public:
    void checkHistory(const string& username) {
        // Simulated function to check history
        cout << "Displaying history for user '" << username << "'.\n";
        // Display charts, graphs, or progress bars here
    }
8)Collaboration:
class Collaboration {
public:
    void collaborateOnGoal(const string& goal, const string& collaborator) {
        cout << "Collaborating on goal '" << goal << "' with user '" << collaborator << "'.\n";
        // Implement collaboration features like shared task lists and progress updates
    }
9)Access_Control:

class AccessControl {
private:
    struct Permission {
        string goal;
        string username;
        bool canEdit;

        Permission(const string& g, const string& u, bool edit) : goal(g), username(u), canEdit(edit) {}
    };

    vector<Permission> permissions;

public:
    void grantPermission(const string& goal, const string& username, bool canEdit) {
        permissions.push_back(Permission(goal, username, canEdit));
        cout << "Permission granted for user '" << username << "' on goal '" << goal << "'.\n";
    }

    bool hasPermission(const string& goal, const string& username) {
        for (const auto& perm : permissions) {
            if (perm.goal == goal && perm.username == username) {
                return perm.canEdit;
            }
        }
        return false; // Default to false if no permission set
    }
10)Synchronization:

class Synchronization {
private:
    struct Permission {
        string goal;
        string username;
        bool canEdit;

        Permission(const string& g, const string& u, bool edit) : goal(g), username(u), canEdit(edit) {}
    };

    vector<Permission> permissions;

public:
    void grantPermission(const string& goal, const string& username, bool canEdit) {
        permissions.push_back(Permission(goal, username, canEdit));
        cout << "Permission granted for user '" << username << "' on goal '" << goal << "'.\n";
    }

    bool hasPermission(const string& goal, const string& username) {
        for (const auto& perm : permissions) {
            if (perm.goal == goal && perm.username == username) {
                return perm.canEdit;
            }
        }
        return false; // Default to false if no permission set
    }
11)Reporting:
class Reporting {
public:
    void checkReporting(const string& username) {
        // Simulated function to check Reporting
        cout << "Displaying history for user '" << username << "'.\n";
        // Display charts, graphs, or progress bars here
    }
12)Customization:
class Customization {
private:
    struct Permission {
        string goal;
        string username;
        bool canEdit;

        Permission(const string& g, const string& u, bool edit) : goal(g), username(u), canEdit(edit) {}
    };

    vector<Permission> permissions;

public:
    void grantPermission(const string& goal, const string& username, bool canEdit) {
        permissions.push_back(Permission(goal, username, canEdit));
        cout << "Permission granted for user '" << username << "' on goal '" << goal << "'.\n";
    }

    bool hasPermission(const string& goal, const string& username) {
        for (const auto& perm : permissions) {
            if (perm.goal == goal && perm.username == username) {
                return perm.canEdit;
            }
        }
        return false; // Default to false if no permission set
    }
13)Data_secuirty:
class Data_secuirty{
private:
    string username;
    string password;

public:
    User(const string& username, const string& password) : username(username), password(password) {}

    const string& getUsername() const {
        return username;
    }

    const string& getPassword() const {
        return password;
    }
